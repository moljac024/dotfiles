#!/usr/bin/env bash

################################################################################
### Helper functions
################################################################################

function is_exported {
    local name="$1"
    if [[ "${!name@a}" == *x* ]]; then
        true; return
    else
        false; return
    fi
}

function is_wsl {
    if grep -qi microsoft /proc/version; then
        true; return
    else
        false; return
    fi
}


function is_command {
    local cmd="$1"
    if command -v $cmd >/dev/null 2>&1; then
        true; return
    else
        false; return
    fi
}

function export_secret () {
    local varName=$1
    local file=$2
    if [[ -f $file ]]; then
        local content=$(cat $file)
        export "${varName}"="$content"
    fi
}

ensure_symlink() {
    local original=$1
    local path=$2

    if [ -e "$path" ]; then
        # mv "$path" "$path.old"
        return
    fi

    local original_fullpath="$(cd "$(dirname "$original")"; pwd)/$(basename "$original")"

    if [ -L "$path" ]; then
        rm "$path"
    fi

    ln -s "$original_fullpath" "$path"
}

function modify_path () {
    # Check if the directory exists and return early if it doesn't
    if [ ! -d "$1" ]; then
        # echo "The directory $1 does not exist"
        return
    fi

    # Check if the directory is not already in PATH
    if [[ ":$PATH:" != *":$1:"* ]]; then
        # Append or prepend the directory to PATH based on the second argument
        if [[ $2 == "prepend" ]]; then
            export PATH="$1:$PATH"
            # echo "Prepended $1 to PATH"
        else
            export PATH="$PATH:$1"
            # echo "Appended $1 to PATH"
        fi
    else
        # echo "$1 is already in PATH"
        echo ""  > /dev/null
    fi
}

################################################################################
### Environment
################################################################################

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export EDITOR='vi'
export DOTFILES=$HOME/dotfiles

# OS X
if [[ "$OSTYPE" == "darwin"* ]]; then
    # Enable bash completion on OS X
    if [ -f `brew --prefix`/etc/bash_completion ]; then
        source `brew --prefix`/etc/bash_completion
    fi

    modify_path "/usr/local/sbin:/usr/local/bin" prepend
fi

# WSL
if is_wsl; then
    export WSL_HOST=$(awk '/nameserver / {print $2; exit}' /etc/resolv.conf 2>/dev/null)
    #export DISPLAY="$WSL_HOST:0"
    #export LIBGL_ALWAYS_INDIRECT=1

    function wsl_ip {
        ip addr show eth0 | grep -oP '(?<=inet\s)\d+(\.\d+){3}'
    }
    export WSL_GUEST=$(wsl_ip)
fi

# Android dev
if [ -d $HOME/Android/Sdk ]; then
    export ANDROID_HOME=$HOME/Android/Sdk
    export ANDROID_SDK_ROOT=$ANDROID_HOME

    modify_path "$ANDROID_HOME/emulator" append
    modify_path "$ANDROID_HOME/platform-tools" append

    # If cmdline tools version 8.0 are installed they should have precendence,
    # because react native does not work with newer ones
    modify_path "$ANDROID_HOME/cmdline-tools/8.0/bin" append
    modify_path "$ANDROID_HOME/cmdline-tools/latest/bin" append
    modify_path "$ANDROID_HOME/cmdline-tools/11.0/bin" append
    modify_path "$ANDROID_HOME/cmdline-tools/10.0/bin" append
    modify_path "$ANDROID_HOME/cmdline-tools/9.0/bin" append

    modify_path "$ANDROID_HOME/tools" append
    modify_path "$ANDROID_HOME/tools/bin" append

    if is_exported WSL_HOST; then
        export ADB_SERVER_SOCKET=tcp:$WSL_HOST:5037
    fi
fi

# Android studio
if [ -d "$HOME/Applications/android-studio" ]; then
    export ANDROID_STUDIO=$HOME/Applications/android-studio
    ensure_symlink "$ANDROID_STUDIO/bin/studio.sh" $HOME/bin/android-studio
    modify_path "$HOME/Applications/android-studio/bin" append
fi
if [ -d "$HOME/Applications/flutter" ]; then
    modify_path "$HOME/Applications/flutter/bin" append
fi

# Rust binaries
modify_path "$HOME/.cargo/bin" prepend

# Vector
if [[ -d $HOME/.vector ]]; then
    modify_path "$HOME/.vector/bin" prepend
fi

# Asdf version manager
if [ -f $HOME/.asdf/asdf.sh ]; then
    source $HOME/.asdf/asdf.sh
fi

# Volta nodejs version manager
if [[ -d $HOME/.volta ]]; then
    export VOLTA_HOME="$HOME/.volta"
    modify_path "$VOLTA_HOME/bin" prepend
fi

# N node version manager
if [[ -d $HOME/.n ]]; then
    export N_PREFIX=$HOME/.n
    modify_path "$N_PREFIX/bin" prepend
fi

# Fly.io
export FLYCTL_INSTALL="$HOME/.fly"
modify_path "$FLYCTL_INSTALL/bin" prepend

# pnpm
export PNPM_HOME="/home/bojan/.local/share/pnpm"
modify_path "$PNPM_HOME" prepend
# pnpm end

# Locally compiled/installed files
modify_path "$HOME/.local/bin" prepend
# Home binaries (systems should do this already)
modify_path "$HOME/bin" prepend

# Flatpak paths
export XDG_DATA_DIRS=$HOME/.local/share/flatpak/exports/share:/var/lib/flatpak/exports/share:$XDG_DATA_DIRS

# Cursor size
if is_command gsettings; then
    export XCURSOR_SIZE="$(gsettings get org.gnome.desktop.interface cursor-size)"
fi

################################################################################
### If not running interactively, stop here
################################################################################

case $- in
    *i*) ;;
    *) return;;
esac

################################################################################
### Prompt
################################################################################

# Starship prompt
if is_command starship; then
    eval "$(starship init bash)"
    eval "$(starship completions bash)"
fi

################################################################################
### Aliases
################################################################################

if [[ "$OSTYPE" == "linux-gnu" ]]; then
    alias ls='ls --color=auto --group-directories-first --sort=extension'
    alias update-ubuntu='sudo sh -c "apt-get update && apt-get -y upgrade && apt-get -y dist-upgrade && apt-get autoremove -y"'
    alias update-fedora='sudo sh -c "yum update -y"'
    alias update-arch='sudo sh -c "pacman -Syu --noconfirm"'
elif [[ "$OSTYPE" == "darwin"* ]]; then
    alias ls='ls -FG'

    whoishoggingport () {
        lsof -n -iTCP:$1 | grep LISTEN
    }
fi

if is_command sudo; then
  # Keep terminal info when using sudo
  alias sudo="sudo TERMINFO=\"$TERMINFO\""
fi

if is_command lazygit; then
  alias lg='lazygit'
fi

# If running in kitty, alias ssh to kitten ssh
if [[ "$TERM" == "xterm-kitty" ]]; then
    alias ssh='kitten ssh'
    # gsettings set org.gnome.desktop.default-applications.terminal exec kitty
fi

alias update-npm-packages="npx npm-check-updates -i"
alias c='clear'
alias ..='cd ..'
alias back='cd "$OLDPWD"'
alias mkdir='mkdir -p -v'
alias su='sudo -i'
alias duf='du -sk * | sort -n | perl -ne '\''($s,$f)=split(m{\t});for (qw(K M G)) {if($s<1024) {printf("%.1f",$s);print "$_\t$f"; last};$s=$s/1024}'\'
alias gs='git add . && git commit -m "Sync" && git push origin'

alias erlang-version="erl -eval '{ok, Version} = file:read_file(filename:join([code:root_dir(), \"releases\", erlang:system_info(otp_release), \"OTP_VERSION\"])), io:fwrite(Version), halt().' -noshell"

alias serve-spa="npx --yes http-server-spa"

alias emacs="flatpak run org.gnu.emacs"

# Vim / Neovim
if is_command vim; then
  export EDITOR='vim'
  export VISUAL='vim'
  alias vi='vim'
fi

if is_command nvim; then
    export EDITOR='nvim'
    export VISUAL='nvim'
    alias vi='nvim'
    alias vim='nvim'
    alias vimdiff='nvim -d'
fi

# Vscode
if is_command code; then
    alias vscode='code'
fi

# Xorg aliases:
alias gta='gitk --all'
alias gita='gitk --all'
alias gg='git gui'

# Use podman over docker
# If podman is installed, use it instead of docker
if is_command podman; then
    alias docker=podman
    alias docker-compose='podman-compose'
    export DOCKER_HOST="unix:///run/podman/podman.sock"
fi

# Distrobox & toolbox aliases
if is_command distrobox; then
  alias db='distrobox'
  alias dbu='distrobox enter ubuntu-22-04'
fi

if is_command toolbox; then
  alias tb='toolbox'
  alias tbf='toolbox enter fedora-toolbox-39'
fi

alias docker-compose='docker compose'
# k8s aliases
alias k='kubectl'
alias kcfg='kubectl config view --minify | grep name'
alias kc='kubectx'
alias kn='kubens'

# Krew kubectl plugin package manager
modify_path "${KREW_ROOT:-$HOME/.krew}/bin" prepend

################################################################################
### Other
################################################################################

# Enable Erlang/Elixir shell history
export ERL_AFLAGS="-kernel shell_history enabled"

# Dircolors
if [[ -f $HOME/.dir_colors ]]; then
    eval "$(dircolors $HOME/.dir_colors)"
fi

# Ripgrep and fzf config
export RIPGREP_CONFIG_PATH=$HOME/.ripgreprc
export FZF_DEFAULT_COMMAND="rg --files"
export FZF_FIND_FILE_COMMAND="rg --files"

# FZF
[ -f ~/.fzf.bash ] && source ~/.fzf.bash
[[ -e "$HOME/.fzf-extras/fzf-extras.sh" ]] \
    && source "$HOME/.fzf-extras/fzf-extras.sh"

################################################################################
### Completions
################################################################################

# Bash completions
if ! shopt -oq posix; then
    if [ -f /usr/share/bash-completion/bash_completion ]; then
        source /usr/share/bash-completion/bash_completion
    elif [ -f /etc/bash_completion ]; then
        source /etc/bash_completion
    fi
    if [ -d $HOME/.bash_completions ]; then
        for f in $HOME/.bash_completions/*
        do
            if [ -f $f ]; then
                source $f
            fi
        done
    fi

    if [ -f $HOME/.bash.complete_alias ]; then
        source $HOME/.bash.complete_alias
        # Complete all aliases
        complete -F _complete_alias "${!BASH_ALIASES[@]}"
    fi
fi

# Asdf completions
if [ -f $HOME/.asdf/completions/asdf.bash ]; then
    source $HOME/.asdf/completions/asdf.bash
fi

# Direnv
if hash direnv >/dev/null 2>&1; then
    eval "$(direnv hook bash)"
fi

if is_command kubectl; then
    source <(kubectl completion bash)
    complete -o default -F __start_kubectl k
fi

# For some reason, this is very slow
# Dagger completions
# if is_command dagger; then
#     source <(dagger completion bash)
# fi

################################################################################
### Secrets
################################################################################

export_secret CR_PAT $DOTFILES/.credentials/github-token-registry
export_secret DO_PAT $DOTFILES/.credentials/digital-ocean
export_secret NPM_TOKEN_FOR_GITHUB $DOTFILES/.credentials/npm_token_for_github

################################################################################
### Misc
################################################################################

# If pwd is not the same as $HOME, then cd to $HOME.
#
# Not sure why, but sometimes the shell starts in a different directory on
# Fedora 40 Kinoite
#
if [ "$PWD" != "$HOME" ]; then
    cd
fi
