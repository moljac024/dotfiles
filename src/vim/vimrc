""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
""""""""""""""""""""""""""""""""""""""""""""""

call plug#begin($HOME . '/.vim/plugged') " Specify a directory for plugins (for Neovim: ~/.local/share/nvim/plugged)

" Basics
Plug 'tmhedberg/matchit'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-vinegar'

" Themes/colors
Plug 'altercation/vim-colors-solarized'
Plug 'chriskempson/base16-vim'

" Editing
Plug 'ervandew/supertab'
Plug 'godlygeek/tabular'
Plug 'editorconfig/editorconfig-vim'

" Movement
Plug 'easymotion/vim-easymotion'
Plug 'justinmk/vim-sneak'

" Languages
Plug 'tpope/vim-markdown'
Plug 'elzr/vim-json'
Plug 'othree/html5.vim'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'leafgarland/typescript-vim'
Plug 'elmcast/elm-vim'
Plug 'elixir-lang/vim-elixir'
Plug 'neovimhaskell/haskell-vim'
Plug 'fatih/vim-go'
Plug 'rust-lang/rust.vim'
Plug 'stanangeloff/php.vim'

" Misc
Plug 'tpope/vim-fugitive'
Plug 'mhinz/vim-startify'
Plug 'mbbill/undotree'
Plug 'tomtom/tcomment_vim'
Plug 'scrooloose/syntastic'
Plug 'Shougo/vimproc.vim', {'do' : 'make'}
Plug 'danro/rename.vim'

" Files
Plug 'scrooloose/nerdtree'
Plug 'justinmk/vim-dirvish'

" Searching
Plug 'ctrlpvim/ctrlp.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'eugen0329/vim-esearch'
Plug 'wincent/ferret'


call plug#end() " Initialize plugin system

""""""""""""""""""""""""""""""""""""""""""""""
" First thing's first
""""""""""""""""""""""""""""""""""""""""""""""

set nocompatible " No old school compatability

""""""""""""""""""""""""""""""""""""""""""""""
" Directories
""""""""""""""""""""""""""""""""""""""""""""""

" On Windows, also use '.vim' instead of 'vimfiles'
if has('win32') || has('win64')
    set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
endif

" Font size on mac
if has("gui_macvim") || has("gui_vimr")
   set guifont=FiraCode:h18
endif

" Sync with system clipboard
if has('win32') || has('win64')
    set clipboard=unnamed
else
    if has("unix")
        let s:uname = system("uname -s")
        let s:uname = substitute(system("uname -s"), '\n', '', '')
        if s:uname == "Darwin"
            " Do Mac stuff here
            " if $USER != 'root'
            "     set clipboard=unnamed
            " endif
        else
            " Do linux stuff here
            set clipboard=unnamedplus
        endif
    endif
endif

" Make directory if it doesn't exist
function! EnsureDirExists (dir)
    if !isdirectory(a:dir)
        if exists("*mkdir")
            call mkdir(a:dir, 'p')
        else
            echo "Please create directory: " . a:dir
        endif
    endif
endfunction

" Ensure needed directories are there
call EnsureDirExists($HOME . '/.vim/backup')
call EnsureDirExists($HOME . '/.vim/sessions')
call EnsureDirExists($HOME . '/.vim/undo')

" Keep all backups in a single directory
if isdirectory($HOME . '/.vim/backup')
    set backupdir=~/.vim/backup//
endif

" Keep all undo in a single directory
if isdirectory($HOME . '/.vim/undo')
    if has("persistent_undo")
        set undodir=~/.vim/undo//
        set undofile
    endif
endif


""""""""""""""""""""""""""""""""""""""""""""""
" Vim options
""""""""""""""""""""""""""""""""""""""""""""""

set encoding=utf-8 " Default encoding utf-8
" set title " Update terminal title
set shortmess=at " Be less verbose
set hidden " Enable multiple buffers open
set scrolloff=3 " Maintain more context around cursor when scrolling
set foldmethod=indent " Fold method
set foldlevel=99 " Fold level
"set nofoldenable " Don't fold code
set nobackup " No backup files
set noswapfile " No swap file, that is so 70s
set backspace=indent,eol,start " Allow backspacing over everything in insert mode
set viewoptions=folds,options,cursor,unix,slash " Better Unix/Windows compatibility
"set timeoutlen=750 " Set the timeout for mapped key combos in ms (default 1000)
set history=1000 " Remember more commands and search history, like an elephant
set undolevels=1000 " Use many muchos levels of undo
set autoread " Automatically reload a file when change detected
set list " Show whitespace characters
set listchars=tab:>-,trail:Â·,extends:# " Highlight problematic whitespace

set splitbelow " Vertical splits go below instead of above
set splitright " Horizontal splits go to the right instead of to the left

" Strip trailing whitespace when saving a file
autocmd BufWritePre * :silent %s/\s\+$//e

"set showmatch " Show matching brackets
"set nowrap " Do not wrap lines
"set autochdir " Auto change directory - better left off, messes up plugins

" Search options
set gdefault " Make global replace default
set ignorecase " Ignore case in search
set smartcase " Ignore case but only when all lowercase characters
set incsearch " Incremental search
set hlsearch " Highlight search results
set wrapscan " Make search wrap around

" Wildignore
" Ignore git repository directory (This doesn't play well with fugitive - it breaks 3-way merge (:Gdiff))
" set wildignore=*/.git/*
" Ignore backup files
set wildignore+=*~
" Ignore compiled files
set wildignore+=*.o
set wildignore+=*.pyc

" Auto completion: show menu
set wildmenu
set wildmode=longest:full

" Tags - search cwd, then up recursively until root
set tags=./tags;/

""""""""""""""""""""""""""""""""""""""""""""""
" Look and feel
""""""""""""""""""""""""""""""""""""""""""""""

"set t_Co=256 " Use 256 colors in terminal
"set number " Show line numbers
"set cursorline " Highlight current line
"set visualbell " Don't beep, blink instead
set noerrorbells " Don't beep, don't you even blink
set ruler " Show cursor position at all times
set showcmd " Show incomplete commands
set showmode " Always show current mode
set ls=2 " Always show status line

if &term =~ '256color'
" Disable Background Color Erase (BCE) so that color schemes
" work properly when Vim is used inside tmux and GNU screen.
" See also http://snk.tuxfamily.org/log/vim-256color-bce.html
  set t_ut=
endif

" set background=dark

" Solarized colors
"let g:solarized_termcolors=16 " For use with solarized terminal color palette
if has("gui_running")
    colorscheme solarized
else
    colorscheme solarized
endif

" gVim options
if has("gui_running") " Options for when GUI is present (gVim)
    set guioptions-=r " Remove right scrollbar
    set guioptions-=l " Remove left scrollbar
    set guioptions-=R " Remove right scrollbar when window is split
    set guioptions-=L " Remove left scrollbar when window is split
    set guioptions-=T " Remove tool bar
    set guioptions-=m " Remove menu bar
    set mousehide " Hide mouse when user starts typing
    if has("gui_gtk2") " Options for when GUI is gtk2 (Linux)
        "set guifont=Deja\ Vu\ Sans\ Mono\ 12
        set guifont=Monospace\ 18
    endif
    if has("gui_gtk3") " Options for when GUI is gtk2 (Linux)
        "set guifont=Deja\ Vu\ Sans\ Mono\ 12
        set guifont=Monospace\ 18
    endif
endif

""""""""""""""""""""""""""""""""""""""""""""""
" Programming
""""""""""""""""""""""""""""""""""""""""""""""

" General tab options
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround " Round indent to multiples of shiftwidth
set expandtab " Expand tabs to spaces (purge evil tabs)
"set smarttab " Insert tabs according to shiftwidth instead of tabstops

" General indenting
set autoindent " Autoindent according to previous line indentation
"set nosmartindent " Intereferes with filetype based indentation
"set nocopyindent " Copy the previous indentation on auto indenting
"set nocindent " C-style auto indenting - Interferes with filetype based indentation

" Syntax highlighting, automatic file detection, and omnicompletion
syntax on
filetype plugin on
filetype plugin indent on
set omnifunc=syntaxcomplete#Complete

" Omnicompletion
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType php setlocal omnifunc=phpcomplete#CompletePHP
" autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType python setlocal omnifunc=jedi#completions

" Python indenting rules
autocmd FileType python setlocal tabstop=4
autocmd FileType python setlocal softtabstop=4
autocmd FileType python setlocal shiftwidth=4
autocmd FileType python setlocal nosmartindent

" Html indenting rules
autocmd FileType xml,html,html.twig,mako setlocal tabstop=2
autocmd FileType xml,html,html.twig,mako setlocal softtabstop=2
autocmd FileType xml,html,html.twig,mako setlocal shiftwidth=2
autocmd FileType xml,html,html.twig,mako setlocal expandtab

" Javascript indenting rules
autocmd FileType javascript setlocal tabstop=2
autocmd FileType javascript setlocal softtabstop=2
autocmd FileType javascript setlocal shiftwidth=2
autocmd FileType javascript setlocal expandtab

" Set .mak files to mako filetype
au BufRead,BufNewFile *.mak set filetype=mako

" Don't expand tabs to spaces when writing a Makefile
autocmd FileType make setlocal noexpandtab

""""""""""""""""""""""""""""""""""""""""""""""
" Keybinds
""""""""""""""""""""""""""""""""""""""""""""""

"Set mapleader key
let g:mapleader=","

" Faster browsing/scrolling
nnoremap <space> <C-f>
nnoremap <s-space> <C-b>
nnoremap <backspace> <C-b>
vnoremap <space> <C-f>
vnoremap <s-space> <C-b>
vnoremap <backspace> <C-b>

" More speed!
inoremap jj <esc>
cnoremap jj <c-c><esc>

" j and k move over rows in the editor, instead of lines of text
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" Y will yank from the cursor to the end of the line, to be consistent with C and D.
nnoremap Y y$

" Delete buffer
nnoremap <leader>k :bw<cr>

" Paste from system clipboard
nnoremap <leader>p "+gP<cr>

" Clear highlight from search
nnoremap <leader>c :silent noh<cr>

" Split window
nnoremap <leader>swh :topleft  vnew<cr>
nnoremap <leader>swl :botright vnew<cr>
nnoremap <leader>swk :topleft  new<cr>
nnoremap <leader>swj :botright new<cr>
" Split buffer
nnoremap <leader>sbh :leftabove  vnew<cr>
nnoremap <leader>sbl :rightbelow vnew<cr>
nnoremap <leader>sbk :leftabove  new<cr>
nnoremap <leader>sbj :rightbelow new<cr>

" Split window
nnoremap <leader>2 :silent sp<cr>
nnoremap <leader>3 :silent vsp<cr>

" Close other windows
nnoremap <leader>1 <c-w>o
" Close current window
nnoremap <leader>4 <c-w>c
nnoremap <leader>0 <c-w>c

" Easier navigation between split windows
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" Fuck you, manual key
nnoremap K <nop>

" Heresy
inoremap <C-a> <esc>I
inoremap <C-e> <esc>A
nnoremap <C-a> ^
nnoremap <C-e> $
cnoremap <C-a> <home>
cnoremap <C-e> <end>

" Split line (opposite of join line (J))
" (uncomment when resolving conflict with vim-sneak S keybind)
"nnoremap S i<cr><esc><right>

" Source
vnoremap <leader>S y:execute @@<cr>:echo 'Sourced selection.'<cr>
nnoremap <leader>S ^vg_y:execute @@<cr>:echo 'Sourced line.'<cr>

" Strip trailing whitespaces
nnoremap <leader>W :silent %s/\s\+$//<cr>:let @/=''<cr>

" Map Control-Space to omnicompletion
inoremap <c-space> <c-x><c-o>

" Format selected text or paragraph with Q
vmap Q gq
nnoremap Q gqap

" Replace word under cursor - on current line
nnoremap <leader>sl :s/\<<C-r><C-w>\>/
" Replace word under cursor - on all lines
nnoremap <leader>sg :%s/\<<C-r><C-w>\>/

" Visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv

" Use sudo to write file
cnoremap w!! w !sudo tee % >/dev/null

" Edit files relative to current file
cnoremap %% <c-r>=expand("%:p:h")<cr>/

""""""""""""""""""""""""""""""""""""""""""""""
" Plugin Keybinds
""""""""""""""""""""""""""""""""""""""""""""""

" Open buffer explorer
nnoremap <leader>b :silent CtrlPBuffer<cr>
nnoremap <c-b> :silent CtrlPBuffer<cr>
inoremap <c-b> <esc>:silent CtrlPBuffer<cr>

" Open file explorer
nnoremap <leader>p :silent CtrlP<cr>
nnoremap <c-p> :silent CtrlP<cr>
inoremap <c-p> <esc>:silent CtrlP<cr>

" Undo tree
nnoremap <leader>u :silent UndotreeToggle<cr>
nnoremap <c-u> :silent UndotreeToggle<cr>
inoremap <c-u> <esc>:silent UndotreeToggle<cr>

""""""""""""""""""""""""""""""""""""""""""""""
" Misc
""""""""""""""""""""""""""""""""""""""""""""""

" Close autocomplete preview window
autocmd CursorMovedI *  if pumvisible() == 0|silent! pclose|endif
autocmd InsertLeave * if pumvisible() == 0|silent! pclose|endif

" Jump to last known position in file
:au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0

  " bind K to grep word under cursor
  nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

  " bind \ (backward slash) to grep shortcut
  command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
  nnoremap \ :Ag<SPACE>
endif


""""""""""""""""""""""""""""""""""""""""""""""
" Keybinds
""""""""""""""""""""""""""""""""""""""""""""""

" Disable auto-pairs keybind for <M-p> (conflict with yankstack)
"let g:AutoPairShortcutToggle = '' " why doesn't this work?

" CtrlP
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
let g:ctrlp_map = '<c-p>'
" Working path mode
let g:ctrlp_working_path_mode = 'ra'
" Don't clear cache on exit
let g:ctrlp_clear_cache_on_exit=0
" Add additional root markers
" let g:ctrlp_root_markers = ['composer.json', 'package.json']

" Supertab
let g:SupertabMappingForward = '<c-space>'
let g:SupertabMappingBackward = '<s-c-space>'
let g:SuperTabDefaultCompletionType = "<C-X><C-O>" " omnicomplete
let g:SuperTabDefaultCompletionType = "context" " smartass
let g:SuperTabClosePreviewOnPopupClose = 1

" JSX works on .js files too
let g:jsx_ext_required = 0

" Change to VCS root when selecting file from startify splash screen
let g:startify_change_to_vcs_root = 1

" Syntastic: use project local installation of eslint
let g:syntastic_javascript_eslint_exe='$(npm bin)/eslint'

" NERDTree
" Toggle NERDTree
map <C-n> :NERDTreeToggle<CR>
nnoremap <leader>n :NERDTreeToggle<CR>
" Close vim if only NERDTree is open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Netrw
" let g:netrw_banner = 0 " No useless banner
" let g:netrw_liststyle = 3 " Tree view
