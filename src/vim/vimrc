"===========================================
" Plugins
"===========================================

if has('nvim')
  call plug#begin($HOME . '/.local/share/nvim/plugged')
else
  call plug#begin($HOME . '/.vim/plugged')
endif

"===========================================
" Basics
"===========================================
Plug 'tmhedberg/matchit'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-vinegar'
"===========================================

"===========================================
" Themes/colors
"===========================================
Plug 'altercation/vim-colors-solarized'
"===========================================

"===========================================
" Editing
Plug 'ervandew/supertab'
Plug 'godlygeek/tabular'
"===========================================

"===========================================
" Movement
Plug 'easymotion/vim-easymotion'
Plug 'justinmk/vim-sneak'
"===========================================

"===========================================
" Languages
"===========================================
" Markdown
Plug 'tpope/vim-markdown'
" ==========

" JSON
Plug 'elzr/vim-json'
" ==========

" Javascript
Plug 'pangloss/vim-javascript'
Plug 'prettier/vim-prettier', {
  \ 'do': 'yarn install',
  \ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue'] }
Plug 'mxw/vim-jsx'
" ==========

" Typescript
Plug 'leafgarland/typescript-vim'
" ==========

"Elm
Plug 'elmcast/elm-vim'
" ==========

" Elixir
Plug 'elixir-lang/vim-elixir'
Plug 'mhinz/vim-mix-format'
" ==========

" Haskell
Plug 'neovimhaskell/haskell-vim'
" ==========

" Go
Plug 'fatih/vim-go'
" ==========

" Rust
Plug 'rust-lang/rust.vim'
" ==========

" PHP
Plug 'stanangeloff/php.vim'
"===========================================

"===========================================
" Misc
"===========================================
Plug 'valloric/listtoggle'
Plug 'tpope/vim-fugitive'
Plug 'mhinz/vim-startify'
Plug 'mbbill/undotree'
Plug 'tomtom/tcomment_vim'
Plug 'mhinz/vim-signify'
Plug 'w0rp/ale'
"===========================================

"===========================================
" Files
Plug 'airblade/vim-rooter'
Plug 'justinmk/vim-dirvish'
"===========================================

"===========================================
" Searching
"===========================================
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'wincent/ferret'
"===========================================


call plug#end() " Initialize plugin system


"===========================================
" First thing's first
"===========================================

set nocompatible " No old school compatability

"===========================================
" Directories
"===========================================

" Make directory if it doesn't exist
function! EnsureDirExists (dir)
    if !isdirectory(a:dir)
        if exists("*mkdir")
            call mkdir(a:dir, 'p')
        else
            echo "Please create directory: " . a:dir
        endif
    endif
endfunction

" Ensure needed directories are there
call EnsureDirExists($HOME . '/.vim/backup')
call EnsureDirExists($HOME . '/.vim/sessions')
call EnsureDirExists($HOME . '/.vim/undo')

" Keep all backups in a single directory
if isdirectory($HOME . '/.vim/backup')
    set backupdir=~/.vim/backup//
endif

" Keep all undo in a single directory
if isdirectory($HOME . '/.vim/undo')
    if has("persistent_undo")
        set undodir=~/.vim/undo//
        set undofile
    endif
endif


"===========================================
" Vim options
"===========================================

set shortmess=at " Be less verbose
set hidden " Enable multiple buffers open
set scrolloff=3 " Maintain more context around cursor when scrolling

set foldmethod=indent " Fold method
set foldlevel=99 " Fold level
"set nofoldenable " Don't fold code

set nobackup " No backup files
set noswapfile " No swap file, that is so 70s
set viewoptions=folds,options,cursor,unix,slash " Better Unix/Windows compatibility
set history=1000 " Remember more commands and search history, like an elephant
set undolevels=1000 " Use many muchos levels of undo
set list " Show whitespace characters

set splitbelow " Vertical splits go below instead of above
set splitright " Horizontal splits go to the right instead of to the left

" Search options
set gdefault " Make global replace default
set ignorecase " Ignore case in search
set smartcase " Ignore case but only when all lowercase characters
set hlsearch " Highlight search results
set wrapscan " Make search wrap around

"===========================================
" Look and feel
"===========================================

set noerrorbells " Don't beep, don't you even blink
set showcmd " Show incomplete commands
set showmode " Always show current mode

if &term =~ '256color'
" Disable Background Color Erase (BCE) so that color schemes
" work properly when Vim is used inside tmux and GNU screen.
" See also http://snk.tuxfamily.org/log/vim-256color-bce.html
  set t_ut=
endif

set background=light
colorscheme solarized

"===========================================
" Programming
"===========================================

" General tab options
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround " Round indent to multiples of shiftwidth
set expandtab " Expand tabs to spaces (purge evil tabs)

" Python indenting rules
autocmd FileType python setlocal tabstop=4
autocmd FileType python setlocal softtabstop=4
autocmd FileType python setlocal shiftwidth=4
autocmd FileType python setlocal nosmartindent

" Html indenting rules
autocmd FileType xml,html setlocal tabstop=2
autocmd FileType xml,html setlocal softtabstop=2
autocmd FileType xml,html setlocal shiftwidth=2
autocmd FileType xml,html setlocal expandtab

" Javascript indenting rules
autocmd FileType javascript,typescript setlocal tabstop=2
autocmd FileType javascript,typescript setlocal softtabstop=2
autocmd FileType javascript,typescript setlocal shiftwidth=2
autocmd FileType javascript,typescript setlocal expandtab

" Elixir indenting rules
autocmd FileType elixir setlocal tabstop=2
autocmd FileType elixir setlocal softtabstop=2
autocmd FileType elixir setlocal shiftwidth=2
autocmd FileType elixir setlocal expandtab

" Don't expand tabs to spaces when writing a Makefile
autocmd FileType make setlocal noexpandtab

"===========================================
" Keybinds
"===========================================

"Set mapleader key
let g:mapleader=","

" More speed!
inoremap jj <esc>
cnoremap jj <c-c><esc>

" j and k move over rows in the editor, instead of lines of text
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" Y will yank from the cursor to the end of the line, to be consistent with C and D.
nnoremap Y y$

" Delete buffer
nnoremap <leader>k :bw<cr>

" Clear highlight from search
nnoremap <leader>c :silent noh<cr>

" Split window
nnoremap <leader>swh :topleft  vnew<cr>
nnoremap <leader>swl :botright vnew<cr>
nnoremap <leader>swk :topleft  new<cr>
nnoremap <leader>swj :botright new<cr>
" Split buffer
nnoremap <leader>sbh :leftabove  vnew<cr>
nnoremap <leader>sbl :rightbelow vnew<cr>
nnoremap <leader>sbk :leftabove  new<cr>
nnoremap <leader>sbj :rightbelow new<cr>

" Split window
nnoremap <leader>2 :silent sp<cr>
nnoremap <leader>3 :silent vsp<cr>

" Close other windows
nnoremap <leader>1 <c-w>o
" Close current window
nnoremap <leader>4 <c-w>c
nnoremap <leader>0 <c-w>c

" Easier navigation between split windows
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" Fuck you, manual key
nnoremap K <nop>

" Heresy
inoremap <C-a> <esc>I
inoremap <C-e> <esc>A
nnoremap <C-a> ^
nnoremap <C-e> $
cnoremap <C-a> <home>
cnoremap <C-e> <end>

" Map Control-Space to omnicompletion
inoremap <c-space> <c-x><c-o>

" Format selected text or paragraph with Q
vmap Q gq
nnoremap Q gqap

" Visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv

" Edit files relative to current file
cnoremap %% <c-r>=expand("%:p:h")<cr>/

"===========================================
" Plugin Keybinds
"===========================================

" Open buffer explorer
nnoremap <leader>b :Buffers<cr>

" Open file explorer
nnoremap <leader>p :FZF<cr>

nnoremap <leader>F :Ack<space>

" Undo tree
nnoremap <leader>u :silent UndotreeToggle<cr>

""""""""""""""""""""""""""""""""""""""""""""""
" Misc
""""""""""""""""""""""""""""""""""""""""""""""

" Jump to last known position in file
:au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

"===========================================
" Keybinds
"===========================================

"===========================================
" Plugins
"===========================================

" Supertab
"===========================================
let g:SupertabMappingForward = '<c-space>'
let g:SupertabMappingBackward = '<s-c-space>'
let g:SuperTabDefaultCompletionType = "<C-X><C-O>" " omnicomplete
let g:SuperTabDefaultCompletionType = "context" " smartass
let g:SuperTabClosePreviewOnPopupClose = 1

" JSX
"===========================================
" JSX works on .js files too
let g:jsx_ext_required = 0

" Prettier
"===========================================
" Run prettier before save
let g:prettier#autoformat = 0
autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue PrettierAsync

" Startify
"===========================================
" Change to VCS root when selecting file from startify splash screen
let g:startify_change_to_vcs_root = 1

" Vim JSON
let g:vim_json_syntax_conceal = 0

" Rooter
"===========================================
let g:rooter_patterns = ['.git/', 'mix.exs', 'package.json', 'README.md']

" Elixir
"===========================================
" Format elixir on save
let g:mix_format_on_save = 1
" let g:mix_format_silent_errors = 1
